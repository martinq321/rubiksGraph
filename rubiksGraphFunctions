ClearAll["Global`*"];
((*Geometry*)
  With[{eps = 0.05},
   ucoords = {{-1/2, -1/2, -1/2}, {-1/2, -1/2, 1/2}, {-1/2, 
        1/2, -1/2}, {-1/2, 1/2, 1/2}, {1/2, -1/2, -1/2}, {1/2, -1/2, 
        1/2}, {1/2, 1/2, -1/2}, {1/2, 1/2, 1/2}}*(1 - eps);
   ];
  cindices = {{8, 4, 2, 6}, {8, 6, 5, 7}, {8, 7, 3, 4}, {4, 3, 1, 
     2}, {1, 3, 7, 5}, {2, 1, 5, 6}};
  cubeletA[orig_, cols_List] := 
   GraphicsComplex[# + orig & /@ ucoords, 
    MapThread[{FaceForm[#1], 
       Polygon[#2, 
        VertexTextureCoordinates -> {{0, 0}, {1, 0}, {1, 1}, {0, 
           1}}]} &, {cols, cindices}]];
  cubeletB[orig_, cols_List, texture_] := 
   GraphicsComplex[# + orig & /@ ucoords, 
    MapThread[{FaceForm[#1], Texture[#3], 
       Polygon[#2, 
        VertexTextureCoordinates -> {{0, 0}, {1, 0}, {1, 1}, {0, 
           1}}]} &, {cols, cindices, texture}]];
  cubeletC[orig_, cols_List, texture_] := 
   GraphicsComplex[# + orig & /@ ucoords, 
    MapThread[{FaceForm[#1], 
       Texture[Graphics[{Black, Style[Text[#3], 200]}, 
         Background -> #1]], 
       Polygon[#2, 
        VertexTextureCoordinates -> {{0, 0}, {1, 0}, {1, 1}, {0, 
           1}}]} &, {cols, cindices, texture}]];
  basic = {b, f, l, r, d, u};
  bcolors = bcolors = {Blue, Green, Orange, Red, Yellow, White};
  MapThread[(#1 /: col[#1] = #2) &, {basic, bcolors}];
  sticker = {
      (* back: {i,i,i,b,i,i} *)
      {{{i, i, i, b, d, l}, {i, i, i, b, i, l}, {u, i, i, b, i, l}},
       {{i, i, i, b, d, i}, {i, i, i, b, i, i}, {u, i, i, b, i, i}},
       {{i, i, r, b, d, i}, {i, i, r, b, i, i}, {u, i, r, b, i, i}}},
      (* middle, {i,i,i,i,i,i} *)
      {{{i, i, i, i, d, l}, {i, i, i, i, i, l}, {u, i, i, i, i, l}},
       {{i, i, i, i, d, i}, {i, i, i, i, i, i}, {u, i, i, i, i, i}},
       {{i, i, r, i, d, i}, {i, i, r, i, i, i}, {u, i, r, i, i, i}}},
      (* front, {i,f,i,i,i,i} *)
      {{{i, f, i, i, d, l}, {i, f, i, i, i, l}, {u, f, i, i, i, l}},
       {{i, f, i, i, d, i}, {i, f, i, i, i, i}, {u, f, i, i, i, i}},
       {{i, f, r, i, d, i}, {i, f, r, i, i, i}, {u, f, r, i, i, i}}}
      } /. (# -> col[#] & /@ basic) /. i -> Black;
  stickersNu = {
    (* back: {i,i,i,b,i,i} *)
    {{{i, i, i, 40, 46, 14}, {i, i, i, 37, i, 12}, {1, i, i, 35, i, 
       9}},
     {{i, i, i, 39, 47, i}, {i, i, i, "B", i, i}, {2, i, i, 34, i, i}},
     {{i, i, 32, 38, 48, i}, {i, i, 29, 36, i, i}, {3, i, 27, 33, i, 
       i}}},
    (* middle, {i,i,i,i,i,i} *)
    {{{i, i, i, i, 44, 15}, {i, i, i, i, i, "L"}, {4, i, i, i, i, 10}},
     {{i, i, i, i, "D", i}, {i, i, i, i, i, i}, {"U", i, i, i, i, i}},
     {{i, i, 31, i, 45, i}, {i, i, "R", i, i, i}, {5, i, 26, i, i, 
       i}}},
    (* front, {i,f,i,i,i,i} *)
    {{{i, 22, i, i, 41, 16}, {i, 20, i, i, i, 13}, {6, 17, i, i, i, 
       11}},
     {{i, 23, i, i, 42, i}, {i, "F", i, i, i, i}, {7, 18, i, i, i, i}},
     {{i, 24, 30, i, 43, i}, {i, 21, 28, i, i, i}, {8, 19, 25, i, i, 
       i}}}
    };
  stickers = {sticker, stickersNu};
  origins = Outer[List, {-1, 0, 1}, {-1, 0, 1}, {-1, 0, 1}];
  solvedA = MapThread[cubeletA, {origins, stickers[[1]]}, 3];
  solvedA[[2, 2, 2]] = {};
  solvedB = 
   MapThread[cubeletB, {origins, stickers[[1]], stickers[[2]]}, 3];
  solvedB[[2, 2, 2]] = {};
  solvedC = 
   MapThread[cubeletC, {origins, stickers[[1]], stickers[[2]]}, 3];
  solvedC[[2, 2, 2]] = {};
  (*Transforms*)
  b /: perm[b] = {{{1, 1, 1}, {1, 3, 1}, {1, 3, 3}, {1, 1, 3}},
    {{1, 2, 1}, {1, 3, 2}, {1, 2, 3}, {1, 1, 2}}, {{1, 2, 2}}};
  f /: perm[f] = Reverse /@ perm[b] /. {1, y_, z_} :> {3, y, z};
  l /: perm[l] = {{{1, 1, 1}, {1, 1, 3}, {3, 1, 3}, {3, 1, 1}},
    {{2, 1, 1}, {1, 1, 2}, {2, 1, 3}, {3, 1, 2}}, {{2, 1, 2}}};
  r /: perm[r] = Reverse /@ perm[l] /. {x_, 1, z_} :> {x, 3, z};
  d /: perm[d] = {{{1, 1, 1}, {3, 1, 1}, {3, 3, 1}, {1, 3, 1}},
    {{2, 1, 1}, {3, 2, 1}, {2, 3, 1}, {1, 2, 1}}, {{2, 2, 1}}};
  u /: perm[u] = Reverse /@ perm[d] /. {x_, y_, 1} :> {x, y, 3};
  n /: perm[n] = {};
  b /: ax[b] = {1, 0, 0};
  f /: ax[f] = -ax[b];
  l /: ax[l] = {0, 1, 0};
  r /: ax[r] = -ax[l];
  d /: ax[d] = {0, 0, 1};
  u /: ax[u] = -ax[d];
  n /: ax[n] = {1, 0, 0};
  (# /: angle[#] = Pi/2) & /@ {b, f, l, r, d, u};
  n /: angle[n] = 0;
  rot[m_] := RotationMatrix[angle[m], ax[m]];
  (*for animation, angle runs from 0 1 always*)
  rot[m_, \[Alpha]_] := RotationMatrix[\[Alpha]*angle[m], ax[m]];
  (*inverses and half turns*)
  perm[inv[m_]] := Reverse /@ perm[m];
  ax[inv[m_]] := ax[m];
  angle[inv[m_]] := -angle[m];
  sq[cycle_ /; OddQ[Length[cycle]]] := 
   Join[Take[cycle, {1, -1, 2}], Take[cycle, {2, -1, 2}]];
  sq[cycle_ /; EvenQ[Length[cycle]]] := 
   Sequence @@ {Take[cycle, {1, -1, 2}], Take[cycle, {2, -1, 2}]};
  perm[half[m_]] := sq /@ perm[m];
  ax[half[m_]] := ax[m];
  angle[half[m_]] := 2*angle[m];
  inv[inv[m_]] := m;
  inv[half[m_]] := half[m];
  Format[inv[m_]] := Overscript[m, "_"];
  Format[half[m_]] := Superscript[m, 2];
  (*rotations*)
  apply[rot_, GraphicsComplex[points_, stuff__]] :=
   GraphicsComplex[rot . # & /@ points, stuff];
  permute[clist_, tensor_] := 
   Fold[ReplacePart[#1, Thread[#2 -> Extract[#1, RotateRight[#2]]]] &,
     tensor, clist];
  permute[clist_, rot_, tensor_] := 
   Fold[ReplacePart[#1, 
      Thread[#2 -> (apply[rot, #] & /@ 
          Extract[#1, RotateRight[#2]])]] &, tensor, clist];
  twist[move_, cube_] := permute[perm[move], rot[move], cube];
  (*animation*)
  turn[move_, \[Alpha]_, part_] := 
   apply[rot[move, \[Alpha]], #] & /@ part;
  With[{allPositions = Round[Flatten[origins + 2, 2]]},
   twisting[m_, \[Alpha]_, cube_] :=
    Module[{mp},
     
     mp = Flatten[perm[m], 1];
     Join[Extract[cube, Complement[allPositions, mp]], 
      turn[m, \[Alpha], Extract[cube, mp]]]
     ]
   ];
  (*keyboard modifiers*)
  mod[m_] := Which[
    CurrentValue["AltKey"] || CurrentValue["ControlKey"], half[m],
    CurrentValue["ShiftKey"], inv[m],
    True, m]
  );
conv1[string_] := 
  Quiet@Flatten[
      If[#[[1]] != #[[2]] && Length@# > 1, {StringJoin@#}, #] &@
         Flatten@If[Last@# == "2", 
           StringJoin /@ {Drop[#, -1], 
             Drop[#, -1]}, #] & /@ (Characters[#][[1]] & /@ 
         Split[StringSplit[#, " "]])] &@string;
conv2[string_] := 
  If[Length@# == 1, #[[1]], #[[1]] <> "2"] & /@ 
     Split[StringSplit[#, " "]] &@string;
conv3[string_] := 
  Flatten[If[Length@# == 2 && #[[2]] == "'", 
        ConstantArray[#[[1]], 3], #] & /@ Characters /@ conv1@#] &@
   string;
cubeA[string_, viewpoint_] := 
  Graphics3D[#, Boxed -> False, Lighting -> {{"Ambient", White}}, 
       ImageSize -> 200, ViewPoint -> viewpoint] &@
     Fold[twist[#2, #] &, solvedA, 
      ToExpression /@ ToLowerCase /@ conv3@#] &@string;
cubeA[string_] := cubeA[string, {Pi, Pi, Pi}];
cube = cubeA; solved = solvedA;
cubeB[string_, viewpoint_] := 
  Graphics3D[#, Boxed -> False, Lighting -> {{"Ambient", White}}, 
       ImageSize -> 200, ViewPoint -> viewpoint] &@
     Fold[twist[#2, #] &, solvedB, 
      ToExpression /@ ToLowerCase /@ conv3@#] &@string;
cubeB[string_] := cubeB[string, {Pi, Pi, Pi}];
cubeC[string_, viewpoint_] := 
  Graphics3D[#, Boxed -> False, Lighting -> {{"Ambient", White}}, 
       ImageSize -> 200, ViewPoint -> viewpoint] &@
     Fold[twist[#2, #] &, solvedC, 
      ToExpression /@ ToLowerCase /@ conv3@#] &@string;
cubeC[string_] := cubeC[string, {Pi, Pi, Pi}];
facelist = 
  Flatten[Join[Take[#, 4], {#2}, Drop[#, 4]] & @@@ 
    Thread[{Partition[Range[48], 8], {"U", "L", "F", "R", "B", "D"}}]];
positions[moves_] := Module[{li},
   li = Fold[twist[#2, #] &, solvedB, 
       ToExpression /@ ToLowerCase /@ conv3@#] &@moves;
   Table[(li[[##]][[1]] & @@ 
           Most[Most[Most[Position[li, Texture[t]][[1]]]]])[[#]] & /@ 
       li[[##]][[3, 1]] & @@ Most[Position[li, Texture[t]][[1]]], {t, 
     facelist}]];
cyclelist[moves_] := 
  Thread[{facelist, 
    facelist[[#]] & /@ 
     Flatten[Position[Sort /@ positions[""], #] & /@ (Sort /@ 
         positions[moves])]}];
graph[moves_] := 
  Graph[DeleteDuplicates[
    Flatten[Thread[Most@# \[UndirectedEdge] Rest@#] &@
        Join[{Last@#}, #] & /@ 
      Select[cyclelist[moves], #[[1]] != #[[2]] &]], 
    Sort@# == Sort@#2 &], VertexLabels -> "Name", ImageSize -> 400];
cycles[moves_] := 
  SortBy[Flatten[Reverse /@ TakeDrop[#, #2]] & @@@ 
      Thread[{#, Flatten[Position[#, Min@#] & /@ #]}], 
     First] &@(#[[All, 1]] & /@ ({#, #2} & @@@ # & /@ 
       FindCycle[graph[moves], Infinity, All]));
displayCycles[moves_] :=
  Grid[{{Column@cycles[moves]}, {graph[moves],
     Grid[{{cubeC[""], cubeC[moves]}, 
       Graphics3D[Rotate[#, Pi, {1, 0, 0}], Boxed -> False, 
            Lighting -> {{"Ambient", White}}, ImageSize -> 200, 
            ViewPoint -> {-Pi, Pi, Pi}] &@
          
          Fold[twist[#2, #] &, solvedC, 
           ToExpression /@ ToLowerCase /@ conv3@#] & /@ {"", 
         moves}}]}}];
         (*
# https: //sagecell.sagemath.org
C=CubeGroup ()
C.parse ("L' U' R' B R D R' F2 U D2 L' U2 L' B2 D2 R U2 L D2")
*)
(*expr=ToExpression["{"<>StringReplace[StringReplace[StringReplace[#,\
Thread[{"(",")"}->{"{","}"}]],Thread[{"},{"}->{"}},{{"}]],Thread[{"}{\
"}->{"},{"}]]<>"}"]&@
"(1,16,40,6,27,48,30,9,22,14,17,3,32,43,35,41,46,11,33,38,24)(4,12,28,\
26,45,15,13,18,29,39,42)(5,31,44,20,7,36,47,23,10,37,21)(8,19,25)";
Graph[Flatten[Thread[Most@#\[UndirectedEdge]Rest@#]&@Join[{Last@#},#]&\
/@expr],VertexLabels\[Rule]"Name",ImageSize->400]
*)
(*
expr=ToExpression["{"<>StringReplace[StringReplace[StringReplace[#,\
Thread[{"(",")"}->{"{","}"}]],Thread[{"},{"}->{"}},{{"}]],Thread[{"}{\
"}->{"},{"}]]<>"}"]&@
"(1,16,40,6,27,48,30,9,22,14,17,3,32,43,35,41,46,11,33,38,24)(4,12,28,\
26,45,15,13,18,29,39,42)(5,31,44,20,7,36,47,23,10,37,21)(8,19,25)"
cycles["L' U' R' B R D R' F2 U D2 L' U2 L' B2 D2 R U2 L D2"]
*)
